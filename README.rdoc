Hi Boston.rb!

== FIRST: If you liked my talk, you'll probably dig my screencast: Vim for Rails Developers
Check it out here: http://www.codeulatescreencasts.com/products/vim-for-rails-developers ==


SECOND: please give me your feedback on SpeakerRate: 
http://speakerrate.com/talks/3213-write-code-faster-expert-level-vim


FINALLY: check out the notes below (and thanks for having me!)



This talk is in beta!  Will be asking for feedback.
Survey: if vim expertise is 1 of 3 levels
No slides, but notes.  Please follow along. 

--------------------------------------------------

Four best tasks for vim master:

First: learn to RTFM
  spend some time each day in vim help
  it ain't easy, but I'm gonna show you
  read plugin docs too

Second: Make a cheat sheet
  Make your OWN 
  Vim is like an instrument
  Need to learn the command, apply it in practice, and then turn it into muscle memory

Third: Have a tool-sharpening list
  Pay attention to stuff that sucks
  Foo/foo example
  Don't break your flow, come back to it
  Put it on the back of your cheat sheet

Fourth: Learn all the single-letter commands
  80/20
  quiz yourself: what does q do?  semicolon?

If you do these three fundamental things, you are well on your way to vim mastery.
After these, the rest of what I'm going to show
you is just gravy.  But sometimes the gravy is the best part, so let's dig in.

--------------------------------------------------

I'm going to teach you how to fish, or how to RTFM
  :h instead of help
  point out C-], C-o (both pop up all over the place)
  :h window 
  :h i_Ctrl+O (show)
  tab and Ctrl+D (works everywhere, colorscheme)
  links to good docs

--------------------------------------------------

Rails.vim
  2 strengths: you don't need to leave vim, and navigation
  Namespaced under :R
  Rails code/demo
  Rgenerate scaffold user
  Rmigration
  Rinvert (point out remove_column gotcha)
  (go to controller) - gf to User and ApplicationController
  Rmodel, RVunittest, RSunittest
  Use Rake on functional test, fails, Rmigration
  Rake runs migration
  Quickfix, cycle with :cn and :cp 
  Rextract
  Rrunner (create user)
  Rp User.last
  Rserver, but what if other instance Rserver!
  Rdoc
  Rdoc!

--------------------------------------------------

Fugitive.vim
  Statusline
  Namespaced under :G
  (use s3_demo)
  (make a change) 
  Glog
  Gstatus -> D -> "-" -> Gcommit -> Gedit
  Gblame selection -> Gblame whole file -> <CR> to reblame ->  o to open commit
  Gmove

--------------------------------------------------

Random smattering of editing stuff:

  * Change/delete inside ( { " '
  * caw, 'a' works on surrounding marks too
  * Text states (think branches of undo tree): g-, g+, :earlier, :later
  * Registers   
    * Anyone not know what registers are?
    * Named registers
    * How to repeatedly put something (named works, but "0 always holds last yank)
  * Change surroundings (surround.vim) 
    * interpolated string
    * delete surroundings
    * change tags
  * c-o for undoing jumps
  * Leader e / Leader s / Leader v
  * % (matchit.vim)
  * Edit that stuff down there: H, M, L
  * gi (go to last insert)
  * C+w for delete word
  * Fix transposed chars
  * tilde

--------------------------------------------------
Tags (didn't get covered)
  great for exploring the rails source!  vendor rails first in vendor/rails
  install exuberant ctags, run ctags -R in app dir
  try typing :tag ActiveRecord::Base, or :tag respond_to
  :ts[elect] to shows all matching tags if there are multiple

Snipmate (didn't get covered)
  will help speed you up!  google snipmate and install
  def
  defp
  deft
  each
  ed
  cla (multi-choice AND calls out to vim)
  easy to write your own

